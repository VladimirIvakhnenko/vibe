plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'jacoco'
}


group = 'org.example'
version = '1.0-SNAPSHOT'
apply plugin: 'io.spring.dependency-management'

java {
    sourceCompatibility = '17'
}
repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'org.jgrapht:jgrapht-core:1.5.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}
repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    def exclusionRules = [
            '**/dto/**',
            '**/models/**',
            '**/*Config.*',
            '**/*Application.*'
    ]
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: exclusionRules)
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                minimum = 0.8
            }
            excludes = [
                'org.recomendation.dto.*',
                'org.recomendation.models.*'
            ]
        }
    }
}